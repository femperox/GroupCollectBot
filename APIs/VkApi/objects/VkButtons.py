from vk_api.keyboard import VkKeyboard, VkKeyboardColor
from confings.Consts import VK_AUTOTAG_FORM_URL, PayloadType, PayloadPriceCheckCountry
from confings.Messages import MessageType

class VkButtons:

    @staticmethod
    def form_back_button(payload):

        settings = dict(one_time = False, inline=True)
            
        keyboard = ''

        keyboard = VkKeyboard(**settings)

        keyboard.add_callback_button(label='‚è™ –ù–∞–∑–∞–¥', color=VkKeyboardColor.SECONDARY, payload = payload) 

        return keyboard

    @staticmethod
    def form_menu_buttons(isAddButton = False, buttonPayloadText = ''):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è –º–µ–Ω—é

        Args:
            isAddButton (bool, optional): —Ñ–ª–∞–≥ –∫–Ω–æ–ø–∫–∏ –≤—ã–∫—É–ø–∞. Defaults to False.
            buttonPayloadText (str, optional): —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ–π–ª–æ–¥–∞. Defaults to ''.

        Returns:
            VkKeyboard: –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
        """

        settings = dict(one_time = False, inline=True)
            
        keyboard = ''

        keyboard = VkKeyboard(**settings)

        if isAddButton:
            keyboard.add_callback_button(label='üîñ –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –≤—ã–∫—É–ø', color=VkKeyboardColor.POSITIVE, payload= {"type": PayloadType.menu_bot_add_item["type"],  "text": buttonPayloadText}) 

        else:
            keyboard.add_openlink_button(link = VK_AUTOTAG_FORM_URL, label ='üì© –î–æ–±–∞–≤–∏—Ç—å—Å—è –∫ –∞–≤—Ç–æ—Ç–µ–≥–∞–º')
            keyboard.add_line()
            keyboard.add_callback_button(label='üì¶ –ú–æ–∏ –ø–æ–∑–∏—Ü–∏–∏', color=VkKeyboardColor.SECONDARY, payload= PayloadType.menu_bot_get_orders)
            keyboard.add_line()
            keyboard.add_callback_button(label='üõí –£–∑–Ω–∞—Ç—å —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (üáØüáµ)', color=VkKeyboardColor.PRIMARY, payload= PayloadType.menu_check_price)
            keyboard.add_line()
            keyboard.add_callback_button(label='üõí –£–∑–Ω–∞—Ç—å —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (üá∫üá∏)', color=VkKeyboardColor.PRIMARY, payload= {"type": PayloadType.menu_check_price["type"], "country": PayloadPriceCheckCountry.us } )
        return keyboard
    
    @staticmethod
    def form_menu_buying_buttons(userId, userMesId):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è –º–µ–Ω—é –≤—ã–∫—É–ø–∞

        Returns:
            VkKeyboard: –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –≤—ã–∫—É–ø–∞
        """
        
        settings = dict(one_time= False, inline=True)
            
        keyboard = VkKeyboard(**settings)

        keyboard.add_callback_button(label ='–î–æ–±–∞–≤–∏—Ç—å –≤ ‚≠êÔ∏è', color=VkKeyboardColor.SECONDARY, payload= PayloadType.buy_fav)
        keyboard.add_line()

        keyboard.add_callback_button(label='–¢–æ–≤–∞—Ä –≤—ã–∫—É–ø–ª–µ–Ω', color=VkKeyboardColor.POSITIVE, payload= {"type": PayloadType.buy_succes["type"],  "user": userId, "userMes": userMesId})
        keyboard.add_callback_button(label='–¢–æ–≤–∞—Ä –ù–ï –≤—ã–∫—É–ø–ª–µ–Ω', color=VkKeyboardColor.NEGATIVE, payload= {"type": PayloadType.buy_fail["type"],  "user": userId, "userMes": userMesId})

        return keyboard

    @staticmethod
    def form_inline_buttons(type, items = []):
        """_summary_

        Args:
            type (MessageType): —Ç–∏–ø –ø–æ–¥–±–æ—Ä–∫–∏
            items (list, optional): —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–¥–±–æ—Ä–∫–∏. Defaults to [].

        Returns:
            VkKeyboard: –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥–±–æ—Ä–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        """

        settings = dict(one_time=False, inline=True)
        
        keyboard = ''

        if type == MessageType.monitor_big_category:  
                    
            keyboard = VkKeyboard(**settings)
            keyboard.add_callback_button(label='üö´', color=VkKeyboardColor.NEGATIVE, payload=PayloadType.ban_seller)
            keyboard.add_callback_button(label='‚≠êÔ∏è', color=VkKeyboardColor.POSITIVE, payload=PayloadType.add_fav)
        
        elif type in [MessageType.monitor_big_category_other, MessageType.monitor_seller, MessageType.fav_list]:

            keyboard = VkKeyboard(**settings)
            j = 0
            columnn_count = 5
            for i in range(len(items)):
                
                if j % columnn_count == 0 and j!=0:
                    keyboard.add_line()

                if type in [MessageType.monitor_big_category_other, MessageType.monitor_seller]:
                    payload = {"type": PayloadType.add_fav_num["type"], "text": PayloadType.add_fav_num["text"].format(i)}
                    keyboard.add_callback_button(label=f'‚≠êÔ∏è {i+1}', color=VkKeyboardColor.POSITIVE, payload=payload)
                
                elif type in [MessageType.fav_list]:
                    payload = {"type": PayloadType.delete_fav_num["type"], "text": PayloadType.delete_fav_num["text"].format(i)}
                    keyboard.add_callback_button(label=f'üóë {i+1}', color=VkKeyboardColor.SECONDARY, payload=payload)

                j += 1

        # –¥–ª—è —á–µ–≥–æ?
        if type in [MessageType.monitor_big_category_other]:
            j = 0
            columnn_count = 5
            for i in range(len(items)):
                
                if j % columnn_count == 0:
                    keyboard.add_line()

                payload = {"type": PayloadType.ban_seller_num["type"], "text": PayloadType.ban_seller_num["text"].format(i)}
                keyboard.add_callback_button(label=f'üö´ {i+1}', color=VkKeyboardColor.NEGATIVE, payload=payload)
                
                j += 1

        return keyboard